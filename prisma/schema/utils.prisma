model Health {
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  @@map("health")
}

/**
 * Represents a platform where credentials and environment variables can be associated.
 * @property id - Unique identifier for the platform. Type: String. Generated using cuid().
 * @property name - Name of the platform. Type: String.
 * @property logo - Logo of the platform. Type: String.
 * @property loginUrl - Login URL of the platform. Type: String.
 * @property status - Status of the platform. Type: PlatformStatus. Defaults to PENDING.
 * @property createdAt - Timestamp when the platform was created. Type: DateTime. Defaults to current time.
 * @property updatedAt - Timestamp when the platform was last updated. Type: DateTime. Updated automatically.
 * @property user - User who created the platform. Type: User. Optional. Relation to User model.
 * @property userId - ID of the user who created the platform. Type: String. Optional.
 */
model Platform {
  id String @id @default(cuid())

  name     String
  logo     String
  loginUrl String

  status PlatformStatus @default(PENDING)

  credential Credential[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("platform")
}

/**
 * Represents a tag associated with credentials and cards.
 * @property id - Unique identifier for the tag. Type: String. Generated using cuid().
 * @property name - Name of the tag. Type: String.
 * @property color - Color of the tag. Type: String. Optional.
 * @property credentials - Credentials associated with the tag. Type: Credential[]. Relation to Credential model.
 * @property cards - Cards associated with the tag. Type: Card[]. Relation to Card model.
 * @property secrets - Secrets associated with the tag. Type: Secret[]. Relation to Secret model.
 */
model Tag {
  id String @id @default(cuid())

  name  String
  color String

  cards       Card[]
  credentials Credential[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  containerId String?
  container   Container? @relation(fields: [containerId], references: [id])

  @@unique([name, userId, containerId])
  @@index([userId])
  @@index([containerId])
  @@map("tag")
}

/**
 * Represents a container for organizing credentials, environment variables, and cards.
 * @property id - Unique identifier for the container. Type: String. Generated using cuid().
 * @property name - Name of the container. Type: String.
 * @property description - Description of the container. Type: String. Optional.
 * @property icon - Icon of the container. Type: String. Optional.
 * @property type - Type of the container defining what entities it can hold. Type: ContainerType. Defaults to MIXED.
 * @property isDefault - Whether this is the default container for its type. Type: Boolean. Defaults to false.
 * @property createdAt - Timestamp when the container was created. Type: DateTime. Defaults to current time.
 * @property updatedAt - Timestamp when the container was last updated. Type: DateTime. Updated automatically.
 * @property user - User who owns the container. Type: User. Relation to User model.
 * @property userId - ID of the user who owns the container. Type: String.
 * @property credentials - Credentials stored in the container. Type: Credential[]. Relation to Credential model.
 * @property environmentVariables - Environment variables stored in the container. Type: EnvironmentVariable[]. Relation to EnvironmentVariable model.
 * @property cards - Cards stored in the container. Type: Card[]. Relation to Card model.
 * @property tags - Tags associated with the container. Type: Tag[]. Relation to Tag model.
 * @constraint unique(userId, type, isDefault) - Ensures a user can have at most one default container per type.
 */
model Container {
  id String @id @default(cuid())

  name      String
  icon      String
  isDefault Boolean @default(false)

  description String?

  type ContainerType @default(MIXED)
  tags Tag[]

  cards       Card[]
  secrets     Secret[]
  credentials Credential[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, type, isDefault], name: "user_default_container_per_type")
  @@index([userId])
  @@index([type])
  @@index([isDefault])
  @@map("container")
}
